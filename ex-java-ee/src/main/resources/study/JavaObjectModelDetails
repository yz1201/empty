锁相关blog ：https://blog.csdn.net/kirito_j/article/details/79201213
java对象在内存中的存储布局：
    普通对象：
        markword        synchronized 信息就存储在markword中
        类型指针        前两个加一块叫对象头
        实例数据
        对齐填充

    数组：
        mark word
        类型指针    (class printer) 前两个加一块是对象头
        数组长度    (length)
        实例数据    (instance data)
        对齐填充    (padding)

java锁升级过程： new(无锁态)-> 偏向锁-》轻量级锁(无锁==自旋锁，自适应自旋) -》重量级锁
synchronized的升级过程跟mark word息息相关。
用mark word中最低的三位代表锁状态，其中一位是偏向锁位，两位是普通锁位

状态	            标志位	                    存储内容
未锁定	              01	             对象哈希码、对象分代年龄
轻量级锁定	          00	                指向锁记录的指针
膨胀(重量级锁定)	      10	                执行重量级锁定的指针
GC标记	              11	                空(不需要记录信息)
可偏向	              01	           偏向线程ID、偏向时间戳、对象分代年龄

锁消除 StringBuffer 用作局部变量的append
锁粗化 StringBuffer 循环一百次append，自动在循环外+锁，而不是循环内一百次加锁-释放锁。
synchronized lock comxchg
synchronized实现过程：
java使用：  synchronized
jvm实现    字节码：monitorenter/monitoreixt
    执行过程中自动升级
        new出来的普通对象。无锁态。+
        +synchronized偏向锁，对象头中记录了线程id，后三位101（有时延）
        有线程来竞争之后，升级为轻量锁，线程栈中生成lock record，并CAS方法记录到对象。
        自旋十次以上，升级为重量级锁，只有一个线程能获得锁，其他线程阻塞在对象的等待队列中。
底层实现    lock comxchg

synchronized VS Lock（CAS）
在高争用，低耗时的环境下，synchronized效率更高
在低争用，低耗时的环境下，CAS效率高。
synchronized到重量级之后是等待队列（不再消耗CPU）
CAS自旋时是消耗CPU资源的。

Volatile
    多线程变量可见性
    禁止指令重排序   DCL 双重检查锁也得+volatile
       如何实现禁止指令重排序
            JVM的内存屏障：屏障两边的指令不可以重排。
         java代码-》volatile
         编译为字节码： 加了个ACC_Volatile
         JSR(Java Specification Requests的缩写，意思是Java 规范提案)内存屏障
            JVM：
                    StoreStoreBarrier               LoadLoadBarrier
                     volatile写操作                   volatile读操作
                    StoreLoadBarrier                LoadStoreBarrier
         hotspot实现 bytecodeinterpreter.cpp => lock 锁总线



